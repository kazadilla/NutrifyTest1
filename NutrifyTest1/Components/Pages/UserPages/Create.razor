@page "/users/create"
@using Microsoft.EntityFrameworkCore
@using NutrifyTest1.Components.Domain
@inject IDbContextFactory<NutrifyTest1.Data.NutrifyTest1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>User</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="User.Name" class="form-control" /> 
                <ValidationMessage For="() => User.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label> 
                <InputText id="email" @bind-Value="User.Email" class="form-control" /> 
                <ValidationMessage For="() => User.Email" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="passwordhash" class="form-label">PasswordHash:</label> 
                <InputText id="passwordhash" @bind-Value="User.PasswordHash" class="form-control" /> 
                <ValidationMessage For="() => User.PasswordHash" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="age" class="form-label">Age:</label> 
                <InputText id="age" @bind-Value="User.Age" class="form-control" /> 
                <ValidationMessage For="() => User.Age" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="gender" class="form-label">Gender:</label> 
                <InputCheckbox id="gender" @bind-Value="User.Gender" class="form-check-input" /> 
                <ValidationMessage For="() => User.Gender" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dietarypreferences" class="form-label">DietaryPreferences:</label> 
                <InputText id="dietarypreferences" @bind-Value="User.DietaryPreferences" class="form-control" /> 
                <ValidationMessage For="() => User.DietaryPreferences" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="healthgoal" class="form-label">HealthGoal:</label> 
                <InputText id="healthgoal" @bind-Value="User.HealthGoal" class="form-control" /> 
                <ValidationMessage For="() => User.HealthGoal" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private User User { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddUser()
    {
        using var context = DbFactory.CreateDbContext();
        context.User.Add(User);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/users");
    }
}

@page "/users/details"
@using Microsoft.EntityFrameworkCore
@using NutrifyTest1.Components.Domain
@inject IDbContextFactory<NutrifyTest1.Data.NutrifyTest1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>User</h2>
    <hr />
    @if (user is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@user.Name</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@user.Email</dd>
            <dt class="col-sm-2">PasswordHash</dt>
            <dd class="col-sm-10">@user.PasswordHash</dd>
            <dt class="col-sm-2">Age</dt>
            <dd class="col-sm-10">@user.Age</dd>
            <dt class="col-sm-2">Gender</dt>
            <dd class="col-sm-10">@user.Gender</dd>
            <dt class="col-sm-2">DietaryPreferences</dt>
            <dd class="col-sm-10">@user.DietaryPreferences</dd>
            <dt class="col-sm-2">HealthGoal</dt>
            <dd class="col-sm-10">@user.HealthGoal</dd>
        </dl>
        <div>
            <a href="@($"/users/edit?userid={user.UserID}")">Edit</a> |
            <a href="@($"/users")">Back to List</a>
        </div>
    }
</div>

@code {
    private User? user;

    [SupplyParameterFromQuery]
    private int UserID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        user = await context.User.FirstOrDefaultAsync(m => m.UserID == UserID);

        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}

@page "/goals/create"
@using Microsoft.EntityFrameworkCore
@using NutrifyTest1.Components.Domain
@inject IDbContextFactory<NutrifyTest1.Data.NutrifyTest1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Goal</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Goal" OnValidSubmit="AddGoal" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="goaltype" class="form-label">GoalType:</label> 
                <InputText id="goaltype" @bind-Value="Goal.GoalType" class="form-control" /> 
                <ValidationMessage For="() => Goal.GoalType" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="targetdate" class="form-label">TargetDate:</label> 
                <InputDate id="targetdate" @bind-Value="Goal.TargetDate" class="form-control" /> 
                <ValidationMessage For="() => Goal.TargetDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="targetcalories" class="form-label">TargetCalories:</label> 
                <InputText id="targetcalories" @bind-Value="Goal.TargetCalories" class="form-control" /> 
                <ValidationMessage For="() => Goal.TargetCalories" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="userid" class="form-label">UserID:</label> 
                <InputNumber id="userid" @bind-Value="Goal.UserID" class="form-control" /> 
                <ValidationMessage For="() => Goal.UserID" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/goals">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Goal Goal { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddGoal()
    {
        using var context = DbFactory.CreateDbContext();
        context.Goal.Add(Goal);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/goals");
    }
}

@page "/goals/delete"
@using Microsoft.EntityFrameworkCore
@using NutrifyTest1.Components.Domain
@inject IDbContextFactory<NutrifyTest1.Data.NutrifyTest1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Goal</h2>
    <hr />
    @if (goal is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">GoalType</dt>
            <dd class="col-sm-10">@goal.GoalType</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TargetDate</dt>
            <dd class="col-sm-10">@goal.TargetDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TargetCalories</dt>
            <dd class="col-sm-10">@goal.TargetCalories</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserID</dt>
            <dd class="col-sm-10">@goal.UserID</dd>
        </dl>
        <EditForm method="post" Model="goal" OnValidSubmit="DeleteGoal" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(goal is null)">Delete</button> |
            <a href="/goals">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Goal? goal;

    [SupplyParameterFromQuery]
    private int GoalID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        goal = await context.Goal.FirstOrDefaultAsync(m => m.GoalID == GoalID);

        if (goal is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteGoal()
    {
        using var context = DbFactory.CreateDbContext();
        context.Goal.Remove(goal!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/goals");
    }
}

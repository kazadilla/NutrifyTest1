@page "/foods/details"
@using Microsoft.EntityFrameworkCore
@using NutrifyTest1.Components.Domain
@inject IDbContextFactory<NutrifyTest1.Data.NutrifyTest1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Food</h2>
    <hr />
    @if (food is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@food.Name</dd>
            <dt class="col-sm-2">Barcode</dt>
            <dd class="col-sm-10">@food.Barcode</dd>
            <dt class="col-sm-2">Category</dt>
            <dd class="col-sm-10">@food.Category</dd>
            <dt class="col-sm-2">ServingSize</dt>
            <dd class="col-sm-10">@food.ServingSize</dd>
            <dt class="col-sm-2">Nutrients</dt>
            <dd class="col-sm-10">@food.Nutrients</dd>
        </dl>
        <div>
            <a href="@($"/foods/edit?foodid={food.FoodID}")">Edit</a> |
            <a href="@($"/foods")">Back to List</a>
        </div>
    }
</div>

@code {
    private Food? food;

    [SupplyParameterFromQuery]
    private int FoodID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        food = await context.Food.FirstOrDefaultAsync(m => m.FoodID == FoodID);

        if (food is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}

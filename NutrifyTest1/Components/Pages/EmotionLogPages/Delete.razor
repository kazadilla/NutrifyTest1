@page "/emotionlogs/delete"
@using Microsoft.EntityFrameworkCore
@using NutrifyTest1.Components.Domain
@inject IDbContextFactory<NutrifyTest1.Data.NutrifyTest1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>EmotionLog</h2>
    <hr />
    @if (emotionlog is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@emotionlog.Date</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Time</dt>
            <dd class="col-sm-10">@emotionlog.Time</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Emotion</dt>
            <dd class="col-sm-10">@emotionlog.Emotion</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserID</dt>
            <dd class="col-sm-10">@emotionlog.UserID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RecipeID</dt>
            <dd class="col-sm-10">@emotionlog.RecipeID</dd>
        </dl>
        <EditForm method="post" Model="emotionlog" OnValidSubmit="DeleteEmotionLog" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(emotionlog is null)">Delete</button> |
            <a href="/emotionlogs">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private EmotionLog? emotionlog;

    [SupplyParameterFromQuery]
    private int EmotionLogID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        emotionlog = await context.EmotionLog.FirstOrDefaultAsync(m => m.EmotionLogID == EmotionLogID);

        if (emotionlog is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteEmotionLog()
    {
        using var context = DbFactory.CreateDbContext();
        context.EmotionLog.Remove(emotionlog!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/emotionlogs");
    }
}

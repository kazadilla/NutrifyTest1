@page "/emotionlogs/edit"
@using Microsoft.EntityFrameworkCore
@using NutrifyTest1.Components.Domain
@inject IDbContextFactory<NutrifyTest1.Data.NutrifyTest1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>EmotionLog</h2>
<hr />
@if (EmotionLog is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="EmotionLog" OnValidSubmit="UpdateEmotionLog" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="EmotionLog.EmotionLogID" value="@EmotionLog.EmotionLogID" />
                <div class="mb-3">
                    <label for="date" class="form-label">Date:</label>
                    <InputDate id="date" @bind-Value="EmotionLog.Date" class="form-control" />
                    <ValidationMessage For="() => EmotionLog.Date" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="time" class="form-label">Time:</label>
                    <InputDate id="time" @bind-Value="EmotionLog.Time" class="form-control" />
                    <ValidationMessage For="() => EmotionLog.Time" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="emotion" class="form-label">Emotion:</label>
                    <InputText id="emotion" @bind-Value="EmotionLog.Emotion" class="form-control" />
                    <ValidationMessage For="() => EmotionLog.Emotion" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="userid" class="form-label">UserID:</label>
                    <InputNumber id="userid" @bind-Value="EmotionLog.UserID" class="form-control" />
                    <ValidationMessage For="() => EmotionLog.UserID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="recipeid" class="form-label">RecipeID:</label>
                    <InputNumber id="recipeid" @bind-Value="EmotionLog.RecipeID" class="form-control" />
                    <ValidationMessage For="() => EmotionLog.RecipeID" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/emotionlogs">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int EmotionLogID { get; set; }

    [SupplyParameterFromForm]
    private EmotionLog? EmotionLog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        EmotionLog ??= await context.EmotionLog.FirstOrDefaultAsync(m => m.EmotionLogID == EmotionLogID);

        if (EmotionLog is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateEmotionLog()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(EmotionLog!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EmotionLogExists(EmotionLog!.EmotionLogID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/emotionlogs");
    }

    private bool EmotionLogExists(int emotionlogid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.EmotionLog.Any(e => e.EmotionLogID == emotionlogid);
    }
}
